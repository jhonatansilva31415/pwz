
* 01 - Python para desenvolvimento web do zero - 2021-2022
=2021-25-11=

* Introdução

Jhonatan da Silva, trabalho na área há 6 anos. Atualmente trabalhando como Sofware Engineer para uma empresa da Califórnia

* Conhecimento prévio

Como essa série é focada em desenvolvimento web, alguns conhecimentos prévios são assumidos

1. Você já instalou o python;
2. Você já rodou algum programa em python (pode até ser olá mundo);
3. Você tem um editor instalado
   - Como vscode, (neo)vi(m), emacs, sublime, pycharm ou outros;

No meu caso, estou usando o emacs, que é onde você está vendo essa apresentação.

* Como rodar um script em python

Você pode ir para o terminal e checar se tem o python instalado

#+begin_src bash
  python --version
#+end_src

Alguns pontos

- 2.7 não é mais utilizado
- >= 3.6 por favor
- >= 3.10 se você gostar de usar as coisas mais novas

* Hello world

Convencional Olá mundo!

#+begin_src python :results output
  print("hello world")
#+end_src

* Print
*** Print básico

Quando você quiser mostrar algo na tela, seja para o usuário ou para você mesmo, use =print=, ou =logging=

#+begin_src python :results output
  print("Heyy!!")
#+end_src

*** Usando f strings

- Variável =name=

#+begin_src python :results output
  name = "Jhonatan"
  print(f"Hey {name}!!")
#+end_src

*** Porque fstrings

#+begin_src python :results output
  name = "Jhonatan"
  print("Hey " + name)
#+end_src


**** But what happens if

Prevent erros like these, and also, it looks cleaner then adding or using .format

#+begin_src python :results output
  name = None
  print("Hey " + name)
#+end_src

#+RESULTS:

* Greet com funções

#+begin_src python :results output

  def greet(name: str):
      print(f"Hi {name}")

  greet("Jhonatan")
  greet("Test")

#+end_src

* Números e Operações

#+begin_src python :results output
  n1 = 2
  n2 = 2
  print(f"n1+n2 : {n1+n2}")
  print(f"n1-n2 : {n1-n2}")
  print(f"n1/n2 : {n1/n2}")
  print(f"n1*n2 : {n1*n2}")
  print(f"n1**n2 : {n1**n2}")
#+end_src

* Uma calculadora simples

- types

#+begin_src python :results output

  def calc(n1, n2):
     return n1+n2

  print(f"A soma é : {calc(1,2)}")
  print(f"A soma é : {calc(2,3)}")

#+end_src

Mas e se nós quisermos subtrair, dividir, multiplicar?

* Lógica

Nós criamos uma calculadora simples, mas ela só soma, e se quisermos adicionar mais funcionalidade?

** if, else

Nós precisamos usar condições, no python, podemos usar =if=, =else= e =elif=

#+begin_src python

  if algo:
    faça algo
  else:
    faça outra coisa

#+end_src

** if, else if

Ou, se quisermos adicionar mais condições

#+begin_src python

  if algo:
    faça algo
  elif algo diferente:
    faça algo diferente
  else:
    faça outra coisa

#+end_src

** Usando if, elif, else para fazer outra calculadora

#+begin_src python :results output

  def calc(operation:str, n1: float, n2: float) -> float:
      value = 0.0
      if operation == 'add':
          value = n1+n2
      elif operation == 'sub':
          value = n1-n2
      elif operation == 'mult':
          value = n1*n2
      elif operation == 'div':
          value = n1/n2
      else:
          value = 0.0

      print(f"The {operation} is {value}")

  calc('add', 1,2)
  calc('add', 2,3)

  calc('mult', 2,3)
  calc('mult', 4,5)

  calc('div', 2,3)
  calc('div', 4,5)

  calc('sub', 2,3)
  calc('sub', 4,5)

#+end_src

** Usando python 3.10

=switch= case foi introduzido no python =3.10= como =match=

#+begin_src python :results output

  def calculator(operation:str, n1: float, n2: float) -> float:
    match operation:
       case "add":
          return n1+n2
       case "sub":
          return n1-n2
       case "div":
          return n1/n2
       case "mult":
          return n1*n2

  print(calculator('add', 2,3))
  print(calculator('sub', 2,3))
  print(calculator('div', 2,3))
  print(calculator('mult', 2,3))

#+end_src

* Dicionários

#+begin_src python :results output

  person = {
    "name":"Jhon",
    "is_dev": False
  }

  name = person["name"]
  name = person.get("name","")
  is_dev = person.get("is_dev",False)
  if is_dev: print(f"{name} is a dev")
  else: print(f"{name}, why you are not a dev?")

#+end_src

* Criando uma pequena API com flask

Instalando flask
#+begin_src bash
  #pyenv activate pfs se voce sabe usar virtual environments
  pip install flask
#+end_src

#+begin_src python :results output

    from flask import Flask

    app = Flask(__name__)


    @app.route('/')
    def home():
        return {'response':'Hello world!'}

    if __name__ == '__main__':
        app.run(port=5000)

#+end_src
